import heliopy.data.spice as spice_data
import heliopy.spice as spice
from datetime import datetime, timedelta
import astropy.units as u
import numpy as np
import matplotlib.pyplot as plt
from astropy.visualization import quantity_support
from typing import List, Optional


def kernel_loader(spacecraft: int = 2) -> spice.Trajectory:
    """
    :param spacecraft: 1 or 2 for Helios 1  or 2, can also be 'ulysses'
    :return:
    """
    if spacecraft == 1 or spacecraft == 2:
        orbiter_kernel = spice_data.get_kernel('helios' + str(spacecraft))
        spice.furnish(orbiter_kernel)
        orbiter = spice.Trajectory('Helios ' + str(spacecraft))
    elif spacecraft == 'ulysses':
        orbiter_kernel = spice_data.get_kernel(str(spacecraft))
        spice.furnish(orbiter_kernel)
        orbiter = spice.Trajectory(spacecraft)
    else:
        raise NotImplementedError('The only probes that can be imported are Helios 1 , Helios 2 and Ulysses')
    return orbiter


def orbit_times_generator(start_date: str = '20/01/1976', end_date: str = '01/10/1979', interval: float = 1) -> List[
                          datetime]:
    """
    Generates a list of times between the start and end dates, with 1 day intervals
    :param start_date: date at which we start considering the data
    :param end_date: date at which we stop considering the data
    :param interval: interval over which the times are returned (one day by default)
    :return:
    """
    start_time = datetime.strptime(start_date, '%d/%m/%Y')
    end_time = datetime.strptime(end_date, '%d/%m/%Y')
    times = []
    while start_time < end_time:
        times.append(start_time)
        start_time = start_time + timedelta(days=interval)
    return times


def furnish_spice_sse(probe: int):
    if probe == 1:
        spice.furnish('sse1.txt')
    elif probe == 2:
        spice.furnish('sse2.txt')
    else:
        raise NotImplementedError('Only Helios 1 and 2 work in SSE')


def orbit_generator(orbiter: spice.Trajectory, times: List[datetime], observing_body: str = 'Sun',
                    frame: str = 'ECLIPJ2000', probe: Optional[int]=1):
    """
    :param orbiter: generated by kernel_loader
    :param times: times generated by orbit_times_generator
    :param observing_body: the orbit will be in the stationary frame of the observing body
    :param frame: frame to be used
    :param probe: 1 or 2 for Helios 1 or 2
    :return:
    """
    if frame == 'SSE':
        furnish_spice_sse(probe)  # Helios 1  and 2 are in SSE, but will need to add other frames for other probes
    orbiter.generate_positions(times, observing_body, frame)
    orbiter.change_units(u.au)


def get_orbiter(probe: int = 1, start_time: str = '15/12/1974', end_time: str = '08/08/1984',
                interval: float = 1) -> spice.Trajectory:
    """
    Returns the orbiter
    :param probe: 1 or 2 for Helios 1 or 2, can also be 'ulysses'
    :param start_time: start time of the orbiter generation
    :param end_time: end time of the orbiter generation
    :param interval: time interval in days between data probing
    :return: orbiter of the spacecraft
    """
    orbiter = kernel_loader(probe)
    times = orbit_times_generator(start_date=start_time, end_date=end_time, interval=interval)
    orbit_generator(orbiter, times)
    return orbiter


def get_planet_orbit(planet: str, start_date: str = '20/01/1976', end_date: str = '01/10/1979',
                     interval: float = 1) -> spice.Trajectory:
    """
    Finds the orbiter for a given planet
    :param planet: planet that we want to analyse
    :param start_date: start date of analysis
    :param end_date: end date of analysis
    :param interval: interval between each date in the orbiter, defaults to 1
    :return: orbiter of the planet
    """
    orbiter_kernel = spice_data.get_kernel('planet_trajectories')
    spice.furnish(orbiter_kernel)
    orbiter = spice.Trajectory(planet)
    start_time = datetime.strptime(start_date, '%d/%m/%Y')
    end_time = datetime.strptime(end_date, '%d/%m/%Y')
    times = []
    while start_time < end_time:
        times.append(start_time)
        start_time = start_time + timedelta(days=interval)
    orbiter.generate_positions(times, 'Sun', 'ECLIPJ2000')
    orbiter.change_units(u.au)
    return orbiter


def plot_orbit(orbiter: spice.Trajectory, spacecraft: int = 2, planets: Optional[List[str]] = None):
    """
    :param orbiter: generated by kernel_loader
    :param spacecraft: 1 or 2 for Helios 1 or 2
    :param planets: list of planets orbits to be plotted
    :return:
    """
    quantity_support()
    times_float = [(t - orbiter.times[0]).total_seconds() for t in orbiter.times]
    fig = plt.figure()
    circle = plt.Circle((0, 0), 0.004, color='r')
    ax = fig.add_subplot(111)
    ax.scatter(orbiter.x, orbiter.y, s=3, c=times_float)
    radius = np.sqrt(orbiter.x ** 2 + orbiter.y ** 2 + orbiter.z ** 2)
    for n in range(len(radius)):
        if 0.1 * u.au < radius[n] < 0.2 * u.au:
            ax.scatter(orbiter.x[n], orbiter.y[n], s=3, c='k')
    ax.scatter(orbiter.x[0], orbiter.y[0], s=5, c='b')
    ax.scatter(orbiter.x[10], orbiter.y[10], s=5, c='r')
    if planets is not None:
        for planet in planets:
            orbiter_planet = get_planet_orbit(planet)
            ax.scatter(orbiter_planet.x, orbiter_planet.y, s=3, c='k')
    ax.set_xlim(-1, 1)
    ax.set_ylim(-1, 1)
    ax.set_title(
        'Orbit of Helios ' + str(spacecraft) + '  between ' + str(orbiter.times[0]) + ' and ' + str(orbiter.times[-1]))
    fig = plt.gcf()
    ax = fig.gca()
    ax.add_artist(circle)
    plt.show()


def plot_period(orbiter, spacecraft: int = 2):
    """
    :param orbiter: generated by kernel_loader
    :param spacecraft: 1 or 2 for Helios 1 or 2
    :return:
    """
    quantity_support()
    fig = plt.figure()
    sun_distance = np.sqrt(orbiter.x ** 2 + orbiter.y ** 2 + orbiter.z ** 2)
    plt.plot(orbiter.times, sun_distance, label='Helios' + str(spacecraft) + ' orbit')
    plt.title(
        'Orbit of Helios ' + str(spacecraft) + '  between ' + str(orbiter.times[0]) + ' and ' + str(orbiter.times[-1]))
    plt.legend()
    plt.show()


if __name__ == '__main__':
    space_probe = 1
    start_datetime = '15/12/1974'
    end_datetime = '08/08/1984'
    # space_probe = 2
    # space_probe = 'ulysses'
    probe_orbiter = kernel_loader(space_probe)
    # probe_times = orbit_times_generator(start_date='20/10/1990', end_date='30/06/2009')
    probe_times = orbit_times_generator(start_date=start_datetime, end_date=start_datetime)
    # probe_times = orbit_times_generator()
    orbit_generator(probe_orbiter, probe_times)
    probe_radius = np.sqrt(probe_orbiter.x ** 2 + probe_orbiter.y ** 2 + probe_orbiter.z ** 2)
    print('the perihelion is ', np.min(probe_radius), ' at ', probe_orbiter.times[np.argmin(probe_radius)])
    print('the aphelion is ', np.max(probe_radius), ' at ', probe_orbiter.times[np.argmax(probe_radius)])
    plot_orbit(probe_orbiter, spacecraft=space_probe, planets=['Venus', 'Earth', 'Mercury'])
    # plot_period(orbiter, spacecraft=probe)
